<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Example Project"
         xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

    <description>WP Referral Code sniff rules</description>

    <file>.</file>
    <arg name="extensions" value="php"/>

    <!-- Exclude the Composer Vendor directory. -->
    <exclude-pattern>/vendor/*</exclude-pattern>

    <!-- Exclude the Node Modules directory. -->
    <exclude-pattern>/node_modules/*</exclude-pattern>

    <!-- Exclude index.php files. -->
    <exclude-pattern>*/index.php</exclude-pattern>
    <exclude-pattern>*/bootstrap.php</exclude-pattern>

    <exclude-pattern>/tests/*</exclude-pattern>

    <!-- Show progress, show the error codes for each message (source). -->
    <arg value="ps"/>

    <!-- Check up to 8 files simultaneously. -->
    <arg name="parallel" value="8"/>

    <rule ref="WordPress-Core"/>

    <!-- Include the WordPress-Extra standard. -->
    <rule ref="WordPress-Extra">
        <!--
        We may want a middle ground though. The best way to do this is add the
        entire ruleset, then rule by rule, remove ones that don't suit a project.
        We can do this by running `phpcs` with the '-s' flag, which allows us to
        see the names of the sniffs reporting errors.
        Once we know the sniff names, we can opt to exclude sniffs which don't
        suit our project like so.

        The below two examples just show how you can exclude rules.
        They are not intended as advice about which sniffs to exclude.
        -->

        <!--
        <exclude name="WordPress.WhiteSpace.ControlStructureSpacing"/>
        <exclude name="WordPress.Security.EscapeOutput"/>
        -->
    </rule>


    <rule ref="Squiz.Commenting">
        <exclude name="Squiz.Commenting.LongConditionClosingComment"/>
        <exclude name="Squiz.Commenting.PostStatementComment"/>
        <exclude name="Squiz.Commenting.FileComment.Missing"/>
        <exclude name="Squiz.Commenting.VariableComment.Missing"/>
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
    </rule>

    <!-- Let's also check that everything is properly documented. -->
    <rule ref="WordPress-Docs"/>

    <!-- Add in some extra rules from other standards. -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <rule ref="Generic.Commenting.Todo"/>

    <!-- Check for PHP cross-version compatibility. -->
    <!--
    To enable this, the PHPCompatibilityWP standard needs
    to be installed.
    See the readme for installation instructions:
    https://github.com/PHPCompatibility/PHPCompatibilityWP
    For more information, also see:
    https://github.com/PHPCompatibility/PHPCompatibility
    -->
<!--        <config name="minimum_supported_wp_version" value="4.8" />-->
<!--        <config name="testVersion" value="5.6-"/>-->
<!--        <rule ref="PHPCompatibilityWP"/>-->

    <!--
    For information on additional custom properties available, check out
    the wiki:
    https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
    -->
    <config name="minimum_supported_wp_version" value="4.8"/>

    <rule ref="WordPress.WP.I18n">
        <properties>
            <property name="text_domain" type="array">
                <element value="wp-referral-code"/>
            </property>
        </properties>
    </rule>

    <rule ref="WordPress.Files.FileName">
        <properties>
            <property name="strict_class_file_names" value="false"/>
        </properties>
    </rule>

    <rule ref="WordPress.PHP.DevelopmentFunctions">
        <properties>
            <property name="exclude" type="array">
                <element value="error_log"/>
            </property>
        </properties>
    </rule>

    <!--    <rule ref="WordPress.NamingConventions.PrefixAllGlobals">-->
    <!--        <properties>-->
    <!--            <property name="prefixes" type="array">-->
    <!--                <element value="my_prefix"/>-->
    <!--            </property>-->
    <!--        </properties>-->
    <!--    </rule>-->

</ruleset>
